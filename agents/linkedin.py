"""
LinkedIn posting agent using PydanticAI.
"""

from typing import Optional
import os
from pydantic_ai import Agent
from dotenv import load_dotenv

from models.schema import LinkedInPostRequest, LinkedInPostResponse, ContentResponse
from utils.linkedin_client import LinkedInClient

load_dotenv()


class LinkedInAgent:
    """Agent for posting content to LinkedIn."""
    
    def __init__(self, access_token: Optional[str] = None):
        """
        Initialize LinkedIn posting agent.
        
        Args:
            access_token: LinkedIn access token (defaults to env var)
        """
        self.client = LinkedInClient(access_token)
        self.agent = Agent(
            "openai:gpt-4o-mini",
            result_type=LinkedInPostResponse,
            system_prompt="""You are a LinkedIn posting agent. Your role is to:
            1. Take content generated by the ContentAgent
            2. Post it to LinkedIn using the LinkedIn API
            3. Handle any errors that occur during posting
            4. Return a detailed response about the posting operation
            
            Always ensure posts are professional and appropriate for LinkedIn's platform.
            If posting fails, provide clear error messages to help with debugging."""
        )
    
    async def post_content(self, content: ContentResponse) -> LinkedInPostResponse:
        """
        Post content to LinkedIn.
        
        Args:
            content: The content response from ContentAgent
            
        Returns:
            LinkedIn posting response
        """
        try:
            # Use the LinkedIn client to post content
            if content.title:
                # If content has a title, post as article
                api_response = self.client.post_article(content)
            else:
                # Otherwise, post as regular content
                api_response = self.client.post_content(content)
            
            # Extract post ID from response
            post_id = api_response.get("id", "").replace("urn:li:ugcPost:", "")
            post_url = f"https://www.linkedin.com/feed/update/{post_id}/" if post_id else None
            
            return LinkedInPostResponse(
                success=True,
                post_id=post_id,
                post_url=post_url,
                api_response=api_response
            )
            
        except Exception as e:
            error_message = str(e)
            
            # Handle specific LinkedIn API errors
            if "401" in error_message:
                error_message = "Authentication failed. Please check your LinkedIn access token."
            elif "403" in error_message:
                error_message = "Permission denied. Ensure your app has w_member_social permission."
            elif "429" in error_message:
                error_message = "Rate limit exceeded. Please wait before posting again."
            elif "400" in error_message:
                error_message = "Bad request. Check your content format and try again."
            
            return LinkedInPostResponse(
                success=False,
                error_message=error_message
            )
    
    async def run(self, request: LinkedInPostRequest) -> LinkedInPostResponse:
        """
        Run the LinkedIn posting agent.
        
        Args:
            request: LinkedIn posting request
            
        Returns:
            LinkedIn posting response
        """
        if request.post_immediately:
            return await self.post_content(request.content)
        else:
            # Return the content that would be posted without actually posting
            return LinkedInPostResponse(
                success=True,
                post_id=None,
                post_url=None,
                error_message="Content prepared but not posted (post_immediately=False)"
            )


# Create a standalone function for direct usage
async def post_to_linkedin(content: ContentResponse, access_token: Optional[str] = None) -> LinkedInPostResponse:
    """
    Convenience function to post content to LinkedIn.
    
    Args:
        content: Content response from ContentAgent
        access_token: LinkedIn access token (optional, uses env var if not provided)
        
    Returns:
        LinkedIn posting response
    """
    agent = LinkedInAgent(access_token)
    return await agent.post_content(content)