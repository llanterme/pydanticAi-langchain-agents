"""
LinkedIn API client for posting content.
"""

import os
from typing import Dict, Any, Optional
import requests
from dotenv import load_dotenv

from models.schema import ContentResponse

load_dotenv()


class LinkedInClient:
    """Client for interacting with LinkedIn API."""
    
    BASE_URL = "https://api.linkedin.com/v2"
    
    def __init__(self, access_token: Optional[str] = None):
        """
        Initialize LinkedIn API client.
        
        Args:
            access_token: LinkedIn access token (defaults to LINKEDIN_ACCESS_TOKEN env var)
        """
        self.access_token = access_token or os.getenv("LINKEDIN_ACCESS_TOKEN")
        if not self.access_token:
            raise ValueError("LinkedIn access token is required")
        
        self.headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Content-Type": "application/json",
            "X-Restli-Protocol-Version": "2.0.0"
        }
    
    def get_user_profile(self) -> Dict[str, Any]:
        """
        Get the authenticated user's profile information.
        
        Returns:
            User profile data
        """
        url = f"{self.BASE_URL}/people/~"
        response = requests.get(url, headers=self.headers)
        response.raise_for_status()
        return response.json()
    
    def post_content(self, content_response: ContentResponse) -> Dict[str, Any]:
        """
        Post content to LinkedIn.
        
        Args:
            content_response: The content generated by ContentAgent
            
        Returns:
            LinkedIn API response
        """
        # Use the hardcoded person URN that works with the API
        # Based on the working curl example provided
        person_urn = "BWN4XEwGew"
        
        # Prepare the post data
        post_data = {
            "author": f"urn:li:person:{person_urn}",
            "lifecycleState": "PUBLISHED",
            "specificContent": {
                "com.linkedin.ugc.ShareContent": {
                    "shareCommentary": {
                        "text": content_response.content
                    },
                    "shareMediaCategory": "NONE"
                }
            },
            "visibility": {
                "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"
            }
        }
        
        # Post to LinkedIn
        url = f"{self.BASE_URL}/ugcPosts"
        response = requests.post(url, json=post_data, headers=self.headers)
        response.raise_for_status()
        return response.json()
    
    def post_article(self, content_response: ContentResponse) -> Dict[str, Any]:
        """
        Post an article to LinkedIn (for Medium-style content with titles).
        
        Args:
            content_response: The content generated by ContentAgent (must have title)
            
        Returns:
            LinkedIn API response
        """
        if not content_response.title:
            raise ValueError("Title is required for LinkedIn articles")
        
        # Use the hardcoded person URN that works with the API
        # Based on the working curl example provided
        person_urn = "BWN4XEwGew"
        
        # Prepare article data
        article_data = {
            "author": f"urn:li:person:{person_urn}",
            "lifecycleState": "PUBLISHED",
            "specificContent": {
                "com.linkedin.ugc.ShareContent": {
                    "shareCommentary": {
                        "text": f"{content_response.title}\n\n{content_response.content}"
                    },
                    "shareMediaCategory": "ARTICLE",
                    "media": [
                        {
                            "status": "READY",
                            "description": {
                                "text": content_response.content
                            },
                            "title": {
                                "text": content_response.title
                            }
                        }
                    ]
                }
            },
            "visibility": {
                "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"
            }
        }
        
        url = f"{self.BASE_URL}/ugcPosts"
        response = requests.post(url, json=article_data, headers=self.headers)
        response.raise_for_status()
        return response.json()
    
    def delete_post(self, post_id: str) -> bool:
        """
        Delete a LinkedIn post.
        
        Args:
            post_id: The ID of the post to delete
            
        Returns:
            True if successful
        """
        url = f"{self.BASE_URL}/ugcPosts/{post_id}"
        response = requests.delete(url, headers=self.headers)
        response.raise_for_status()
        return True
    
    def get_post_statistics(self, post_id: str) -> Dict[str, Any]:
        """
        Get statistics for a LinkedIn post.
        
        Args:
            post_id: The ID of the post
            
        Returns:
            Post statistics
        """
        url = f"{self.BASE_URL}/ugcPosts/{post_id}"
        response = requests.get(url, headers=self.headers)
        response.raise_for_status()
        return response.json()